@using PickingListApp.DTOs
@using MudBlazor

@if (Items != null)
{
    <MudTable Items="@Items" Hover="true" CanCancelEdit="true" @ref="table"
              RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
              RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@IsReadOnly">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Line Items</MudText>
            <MudSpacer />
            @if (!IsReadOnly)
            {
                <MudButton OnClick="@AddNewItem" Color="Color.Primary">Add Item</MudButton>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Line</MudTh>
            <MudTh>Qty</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>Item Code</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Width</MudTh>
            <MudTh>Length</MudTh>
            <MudTh>Weight</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Line">@context.LineNo</MudTd>
            <MudTd DataLabel="Qty">@context.Quantity</MudTd>
            <MudTd DataLabel="Unit">@context.QuantityUnit</MudTd>
            <MudTd DataLabel="ItemCode">@context.ItemCode</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Width">@context.WidthIn</MudTd>
            <MudTd DataLabel="Length">@context.LengthIn</MudTd>
            <MudTd DataLabel="Weight">@context.WeightLbs</MudTd>
            <MudTd>
                 <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" OnClick="@(() => ShowDetails(context))" />
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Line"><MudNumericField @bind-Value="context.LineNo" Required /></MudTd>
            <MudTd DataLabel="Qty"><MudNumericField @bind-Value="context.Quantity" Required /></MudTd>
            <MudTd DataLabel="Unit"><MudTextField @bind-Value="context.QuantityUnit" Required /></MudTd>
            <MudTd DataLabel="ItemCode"><MudTextField @bind-Value="context.ItemCode" Required /></MudTd>
            <MudTd DataLabel="Description"><MudTextField @bind-Value="context.Description" Lines="3" /></MudTd>
            <MudTd DataLabel="Width"><MudNumericField @bind-Value="context.WidthIn" /></MudTd>
            <MudTd DataLabel="Length"><MudNumericField @bind-Value="context.LengthIn" /></MudTd>
            <MudTd DataLabel="Weight"><MudNumericField @bind-Value="context.WeightLbs" /></MudTd>
        </RowEditingTemplate>
        <ChildRowContent>
            @if(selectedItem != null && selectedItem.Equals(context))
            {
                <MudTr>
                    <td colspan="9">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Tag Details</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudTable Items="@context.TagDetails" Dense="true" Hover="true" Context="tagContext">
                                    <HeaderContent>
                                        <MudTh>Tag #</MudTh>
                                        <MudTh>Heat #</MudTh>
                                        <MudTh>Mill Ref</MudTh>
                                        <MudTh>Qty</MudTh>
                                        <MudTh>Thickness</MudTh>
                                        <MudTh>Size</MudTh>
                                        <MudTh>Location</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd>@tagContext.TagNo</MudTd>
                                        <MudTd>@tagContext.HeatNo</MudTd>
                                        <MudTd>@tagContext.MillRef</MudTd>
                                        <MudTd>@tagContext.Qty</MudTd>
                                        <MudTd>@tagContext.ThicknessIn</MudTd>
                                        <MudTd>@tagContext.Size</MudTd>
                                        <MudTd>@tagContext.Location</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
}

@code {
    [Parameter]
    public ICollection<PickingListItemDto>? Items { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    private MudTable<PickingListItemDto> table = default!;
    private PickingListItemDto? selectedItem;
    private PickingListItemDto? elementBeforeEdit;

    private void ShowDetails(PickingListItemDto item)
    {
        if (selectedItem != null && selectedItem.Equals(item))
        {
            selectedItem = null;
        }
        else
        {
            selectedItem = item;
        }
    }

    private void AddNewItem()
    {
        var newLineNo = (Items?.Count ?? 0) + 1;
        var newItem = new PickingListItemDto { LineNo = newLineNo, QuantityUnit = "PCS" };
        Items?.Add(newItem);
        table.SetEditingItem(newItem);
    }

    private void BackupItem(object item)
    {
        elementBeforeEdit = new()
        {
            LineNo = ((PickingListItemDto)item).LineNo,
            Quantity = ((PickingListItemDto)item).Quantity,
            ItemCode = ((PickingListItemDto)item).ItemCode,
            Description = ((PickingListItemDto)item).Description
        };
    }

    private void ItemHasBeenCommitted(object item)
    {
        // In a real app, you might have logic here. For now, the binding handles the update.
    }

    private void ResetItemToOriginalValues(object item)
    {
        if (elementBeforeEdit == null) return;
        var dto = (PickingListItemDto)item;
        dto.LineNo = elementBeforeEdit.LineNo;
        dto.Quantity = elementBeforeEdit.Quantity;
        dto.ItemCode = elementBeforeEdit.ItemCode;
        dto.Description = elementBeforeEdit.Description;
    }
}
