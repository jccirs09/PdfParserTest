@page "/parser"
@using PdfParserTest.Components.Services
@inject PdfParsingService PdfParsingService
@inject IJSRuntime JSRuntime

<h3>PDF Parser</h3>

<MudSelect T="string" Label="Select a PDF file" @bind-Value="selectedPdf">
    @foreach (var file in samplePdfs)
    {
        <MudSelectItem T="string" Value="@file">@file</MudSelectItem>
    }
</MudSelect>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ParsePdf">Parse PDF</MudButton>

@if (!string.IsNullOrEmpty(rawText))
{
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="DownloadText">Download Text</MudButton>
    <h4>Raw Text</h4>
    <pre>@rawText</pre>
}

@code {
    private string selectedPdf;
    private string rawText;
    private List<string> samplePdfs = new List<string>();

    protected override void OnInitialized()
    {
        var sampleFiles = System.IO.Directory.GetFiles("Samples", "*.pdf");
        foreach (var file in sampleFiles)
        {
            samplePdfs.Add(System.IO.Path.GetFileName(file));
        }
        if(samplePdfs.Count > 0)
        {
            selectedPdf = samplePdfs[0];
        }
    }

    private void ParsePdf()
    {
        if (!string.IsNullOrEmpty(selectedPdf))
        {
            var filePath = System.IO.Path.Combine("Samples", selectedPdf);
            rawText = PdfParsingService.GetRawText(filePath);
        }
    }

    private async Task DownloadText()
    {
        if (!string.IsNullOrEmpty(rawText))
        {
            var fileName = $"{System.IO.Path.GetFileNameWithoutExtension(selectedPdf)}.txt";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, rawText);
        }
    }
}
