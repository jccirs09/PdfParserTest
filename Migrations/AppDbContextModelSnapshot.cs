// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PickingListApp.Data;

#nullable disable

namespace PickingListApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("PickingListApp.Data.ItemTagDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeatNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("MillRef")
                        .HasColumnType("TEXT");

                    b.Property<int>("PickingListItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagNo")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ThicknessIn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PickingListItemId");

                    b.ToTable("ItemTagDetails");
                });

            modelBuilder.Entity("PickingListApp.Data.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("PickingListApp.Data.PickingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Buyer")
                        .HasColumnType("TEXT");

                    b.Property<string>("CallBeforePhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("FobPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PickingGroup")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PrintDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceivingHours")
                        .HasColumnType("TEXT");

                    b.Property<string>("Route")
                        .HasColumnType("TEXT");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SalesRep")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipToId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShipVia")
                        .HasColumnType("TEXT");

                    b.Property<int>("SoldToId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Terms")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalWeightLbs")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique();

                    b.HasIndex("ShipToId");

                    b.HasIndex("SoldToId");

                    b.ToTable("PickingLists");
                });

            modelBuilder.Entity("PickingListApp.Data.PickingListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LengthIn")
                        .HasColumnType("TEXT");

                    b.Property<int>("LineNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PickingListId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcessType")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuantityStaged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuantityUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WeightLbs")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WidthIn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PickingListId");

                    b.ToTable("PickingListItems");
                });

            modelBuilder.Entity("PickingListApp.Data.ItemTagDetail", b =>
                {
                    b.HasOne("PickingListApp.Data.PickingListItem", "PickingListItem")
                        .WithMany("TagDetails")
                        .HasForeignKey("PickingListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickingListItem");
                });

            modelBuilder.Entity("PickingListApp.Data.PickingList", b =>
                {
                    b.HasOne("PickingListApp.Data.Party", "ShipTo")
                        .WithMany()
                        .HasForeignKey("ShipToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PickingListApp.Data.Party", "SoldTo")
                        .WithMany()
                        .HasForeignKey("SoldToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShipTo");

                    b.Navigation("SoldTo");
                });

            modelBuilder.Entity("PickingListApp.Data.PickingListItem", b =>
                {
                    b.HasOne("PickingListApp.Data.PickingList", "PickingList")
                        .WithMany("Items")
                        .HasForeignKey("PickingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickingList");
                });

            modelBuilder.Entity("PickingListApp.Data.PickingList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PickingListApp.Data.PickingListItem", b =>
                {
                    b.Navigation("TagDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
