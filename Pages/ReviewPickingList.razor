@page "/review"
@inject StateService State
@inject NavigationManager NavManager
@inject HttpClient Http

@using PickingListApp.Services
@using PickingListApp.DTOs

<PageTitle>Review Picking List</PageTitle>

@if (pickingList == null)
{
    <p><em>No picking list to review. Please <a href="/upload">upload</a> one first.</em></p>
}
else
{
    <h3>Review & Edit Picking List</h3>
    <p><strong>Sales Order:</strong> @pickingList.SalesOrderNumber</p>
    <hr />

    <h4>Header</h4>
    <HeaderEditor PickingList="pickingList" />
    <hr />

    <h4>Line Items</h4>
    <LineItemsGrid Items="pickingList.Items" />
    <hr />

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="HandleSave">Approve & Save</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            @successMessage
        </div>
    }
}


@code {
    private PickingListDto? pickingList;
    private string? errorMessage;
    private string? successMessage;

    protected override void OnInitialized()
    {
        pickingList = State.CurrentPickingList;
        if (pickingList == null)
        {
            // NavManager.NavigateTo("/upload");
        }
    }

    private async Task HandleSave()
    {
        if (pickingList == null) return;

        errorMessage = null;
        successMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/pickinglists", pickingList);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SaveResult>();
                successMessage = $"Picking list {result?.SalesOrderNumber} saved successfully with ID {result?.Id}.";
                NavManager.NavigateTo($"/pickinglists/{result?.Id}");
            }
            else
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error saving: {response.ReasonPhrase}. {errorBody}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    public class SaveResult
    {
        public int Id { get; set; }
        public string? SalesOrderNumber { get; set; }
    }
}
