@page "/review/{id:int}"
@inject NavigationManager NavManager
@inject HttpClient Http

@using PickingListApp.DTOs
@using System.Net.Http.Json

<PageTitle>Review Picking List</PageTitle>

@if (pickingList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Review & Edit Picking List</h3>
    <p><strong>Sales Order:</strong> @pickingList.SalesOrderNumber</p>
    <hr />

    <EditForm Model="pickingList" OnValidSubmit="HandleSave">
        <DataAnnotationsValidator />

        <h4>Header</h4>
        <HeaderEditor PickingList="pickingList" />
        <hr />

        <h4>Line Items</h4>
        <LineItemsGrid Items="pickingList.Items" />
        <hr />

        <div class="mt-3">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Approve & Save</MudButton>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
}


@code {
    [Parameter]
    public int Id { get; set; }

    private PickingListDto? pickingList;
    private string? errorMessage;

    public class SaveResult { public int Id { get; set; } public string? SalesOrderNumber { get; set; } }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pickingList = await Http.GetFromJsonAsync<PickingListDto>($"api/pickinglists/{Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading picking list: {ex.Message}";
        }
    }

    private async Task HandleSave()
    {
        if (pickingList == null) return;
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/pickinglists", pickingList);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SaveResult>();
                NavManager.NavigateTo($"/pickinglists/{result?.Id}");
            }
            else
            {
                errorMessage = $"Error saving: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}
