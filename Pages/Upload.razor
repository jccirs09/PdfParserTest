@page "/upload"
@inject HttpClient Http
@inject NavigationManager NavManager

@using Microsoft.AspNetCore.Components.Forms
@using PickingListApp.DTOs
@using System.Net.Http.Json

<PageTitle>Upload Picking List</PageTitle>

<h1>Upload Picking List</h1>

<p>Select a PDF file to parse and save as a draft.</p>

<label class="mud-button-root mud-button mud-button-filled mud-button-filled-primary mud-button-filled-size-medium">
    Select and Upload PDF
    <InputFile OnChange="HandleFileSelected" accept=".pdf" style="display: none;" />
</label>

@if (isUploading)
{
    <p class="mt-3"><em>Uploading, parsing, and saving draft...</em></p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private bool isUploading;
    private string? errorMessage;

    // Helper class for the API response
    public class SaveResult { public int Id { get; set; } }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        isUploading = true;
        errorMessage = null;
        StateHasChanged();

        var file = e.File;
        if (file == null)
        {
            isUploading = false;
            return;
        }

        try
        {
            // 1. Upload and parse the file
            using var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream(10 * 1024 * 1024)), "file", file.Name);
            var uploadResponse = await Http.PostAsync("api/pickinglists/upload", content);

            if (!uploadResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error parsing file: {await uploadResponse.Content.ReadAsStringAsync()}";
                return;
            }

            var parsedList = await uploadResponse.Content.ReadFromJsonAsync<PickingListDto>();
            if (parsedList == null)
            {
                errorMessage = "Failed to deserialize the parsed picking list.";
                return;
            }

            // 2. Immediately save the parsed DTO to get an ID
            var saveResponse = await Http.PostAsJsonAsync("api/pickinglists", parsedList);

            if (!saveResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error saving draft: {await saveResponse.Content.ReadAsStringAsync()}";
                return;
            }

            var saveResult = await saveResponse.Content.ReadFromJsonAsync<SaveResult>();
            if (saveResult == null)
            {
                errorMessage = "Failed to get ID from save operation.";
                return;
            }

            // 3. Navigate to the new review page with the ID
            NavManager.NavigateTo($"/review/{saveResult.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
}
